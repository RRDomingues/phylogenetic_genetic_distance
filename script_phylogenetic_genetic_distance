################################################################################    
######### R codes for phylogenetic analyses by using FASTA format file #########
################################################################################    

###---------- input file

1 - porifera_18s_without_outgroup.fas

###---------- INSTALL PACKAGES

#If you have already them, you can skip this part (InstallPackages is set to FALSE by default)
InstallPackages = T

if (InstallPackages) {
  if (!requireNamespace("BiocManager", quietly=TRUE)) 
    install.packages("BiocManager")
  BiocManager::install("msa")
  
  install.packages("adegenet")
  install.packages("ape")
  install.packages("ggtree")
  install.packages("ggplot2")
  install.packages("ips")
  install.packages("bios2mds")
  install.packages("haplotypes")
  install.packages("pegas")
  install.packages("phytools")
  install.packages("stats")
  install.packages("treeio")
  install.packages("geiger")
}

###---------- LOADING PACKAGES

library(adegenet)
library(ape)
library(ggtree)
library(ggplot2)
library(stats)
library(ips)
library(msa)
library(geiger)
library(reshape)
library(pegas)
library(phytools)
library(stats)

###---------- WARNING

#We would like to warn those who will use the Align command that the alignment process can take 
#only a minute or a few hours depending on the length of your sequence and the number of samples or strong of your devices. 

#########################################################################
###########   INPUT FASTA FILES AND ALIGN THE SEQUENCES #################
#########################################################################

###---------- input file

fname = "porifera_18s_without_outgroup.fas" 

###---------- The program reads fasta file and aligns it

AlignNeeded = TRUE 

if (AlignNeeded) {
  
file <- readDNAStringSet(fname)#for reading multiple DNA sequences from msa package
file
  
###---------- multiple sequence alignment from msa package

cb<- msa(file)    
cb
  
###---------- CONVERTING ALIGN FILE TO FASTA FILE    
  
cv<-msaConvert(cb, type=c("bios2mds::align"))
  
###---------- EXPORTING  ALIGNED FASTA FILE              
  
  library(bios2mds) # for exporting fasta file
  
  export.fasta(cv, outfile = "outfile.fas", ncol(cb), open = "w")
}

#After align and export, please check your sequence that has whether gaps or missing in the "outfile.fas".
#If sequences have gaps or are missing, please fix them and call again using "fasta2DNAbin(fname/"outfile.fas")" as below.
#If your sequences have not gaps or are not missing, you can directly contuniue to "nbin<-as.DNAbin(cb)" command as below.

nbin<-as.DNAbin(cb) #read aligned data from cb above


################################################################################
############ READING AND PLOTTING OF ALIGNMENT-NJ-MSAPLOT (kimura tree) ######## 
################################################################################

#If you don't need to align your file or you get repaired "outfile.fas", 
#you can use "readFASTA2DNAbin(fname)" command to call them to RStudio console as below.

nbin<-fasta2DNAbin(fname)# read your previously aligned FASTA file name.


#After align you must use trimEnds() command as below. 
#If you don't need to trim you can follow the next command.

TRIM = FALSE       # Already trimmed sequence is assumed

if (TRIM) {
  nbin<-trimEnds(nbin)#trimming of sequences ends
}

############################################# 
#WARNING    
#Before starting the analysis, you should be sure that the names of samples like "name_1; name_2, ...".
#If you couldn't change it before, you can fastly change them as below.
#Firstly, you can write names of aligned sequences to see the name list using the "labels(nbin)" command, 
#then you can rename them as below;
#A, B, and C letters represent names of populations or groups.
#rownames(nbin)[1:10]=paste("A_",1:10, sep="")
#rownames(nbin)[11:20]=paste("B_",1:10, sep="")
#rownames(nbin)[21:30]=paste("C_",1:10, sep="")....
#After changing the name of samples, you can follow codes as below.
#############################################

###---------- converting DNAbin to alignment format

an<-as.alignment(nbin)  

###---------- converting alignment to matrix

nm<-as.matrix(an) 

###---------- extraction of the sample names

nbinmat<-as.matrix(labels(nbin)) 
nbin
class(nbin)

###---------- computing distance by ape package with K80 model derived by Kimura (1980)

dnbin<-dist.dna(nbin, model = "K80") 
tree<-nj(dnbin)
tiff(file = "tree_18s_porifera_nj.tiff", width=10, heigh=8, 
     unit="in",res = 600, compression="lzw")
ggt<-ggtree(tree, cex = 0.8, aes(color=branch.length))+scale_color_continuous(high='grey',low='black')+geom_tiplab(align=TRUE, size=2)+geom_treescale(y = - 5, color = "black", fontsize = 4)
dev.off()
ggt

#The shared S2_Appendix.fas dataset is not contained missing value, different letter (N, R, K etc.) or gaps.
#If your sequences have gaps (-) or N, Y, K, R letter (IUPAC nucleotide code), 
#you have to add additional color in "color argument" below.
#For example, "rep("green",1,)" for gaps, "rep("pink",1,)" for N letter etc.
#However, you have to delete or fix the gaps to be able to do other analysis.
#If you have big data set, you can modified "width" and "height" arguments below for better images.

tiff(file = "tree_porifera_nj_18s_without_outgroup_customized.tiff", width=10, heigh=8, 
     unit="in",res = 300, compression="lzw")
njmsaplot<-msaplot(ggt, nbin, offset = 0.03, width=1, height = 0.6, 
            color = c(rep("grey", 1), rep("green", 1), rep("blue", 1), rep("black", 1), rep("yellow", 1),
            rep("orange", 1), rep("red", 1), rep("purple", 1), rep("pink"), rep("gold")))
dev.off()
njmsaplot


ggsave("tree_porifera_nj_18s_without_outgroup_customized.tiff", plot = njmsaplot, device = "tiff", dpi = 600, width = 10, height = 8, units = "in")

###---------- neighbor-joining tree estimation of Saitou and Nei (1987)

tiff(file = "porifera_nj_18s_distance.tiff", width=10, heigh=8, 
     unit="in",res = 600, compression="lzw")
njdistree<-ggtree(tree,layout = 'circular', branch.length='branch.length', aes(color=branch.length), lwd = 0.5)+xlim(-2, NA)+
  geom_tiplab(names(nbin), size = 3, offset=0.002)+scale_color_continuous(high='lightskyblue1',low='black')+
  geom_treescale(x=-2, color = "black", fontsize = 3, offset = 9) 
dev.off()
njdistree

############ Maximum Likelihood-based ###############
# The Maximum Likelihood (ML) method is a statistical principle used to estimate the 
# parameters of a statistical model.
# The central idea is to find the parameter values ..that maximize the probability
# of observing the data that were actually observed.
# In sume: The probability of maximizing the data, given the model parameters.

library(phangorn)
library(viridis)

#data
dna1_18s <- read.phyDat("outfile.fas", format = "fasta")
#fasta file aligned on MEGA with two species from an outgroup.

# evolutionary model of base substitution
mt_18s <- modelTest(dna1_18s)
  fit_18s <- as.pml(mt_18s, "BIC")

fit_mt_18s <- pml_bb(mt_18s, control = pml.control(trace = 0))
fit_mt_18s

#model: TrN+G(4)+I 
#loglikelihood: -4741.303 
#unconstrained loglikelihood: -3603.501 
#Proportion of invariant sites: 0.5599998 
#Discrete gamma model
#Number of rate categories: 4 
#Shape parameter: 0.6186596

fitTIM_18s <- pml_bb(dna1_18s, model="TrN+G(4)+I") 

# bootstrap
# The Bootstrap method is a statistical technique that involves sampling
# repeated with replacement from an existing data set.
# It is used to estimate the variability of a statistical estimate or to
# evaluate the robustness of a statistical procedure.

bs_18s <- bootstrap.pml(fit_mt_18s, bs=1000, optNni=TRUE,
                        control = pml.control(trace = 0))

tiff(file = "porifera_ML_18s_distance.tiff", width=10, heigh=8, 
     unit="in",res = 600, compression="lzw")
plot_coi <- plotBS(midpoint(fit_mt_18s$tree), bs_coi, p = 70, type="p", main="Phylogenetic tree of sponges - 18s")
dev.off()

############################################################################
####################   DISTANCE MATRIX OF HAPLOTYPES    ####################
############################################################################

library(pegas)

D_18s <- dist.dna(nbin, model = "k80")
length(D_18s) 
D_18s

#transform dataframe as matrix
temp_18s <- as.data.frame(as.matrix(D_18s))

#represent the genetic distance in a table (heatmap)
#light colors- minor differences; dark colors - biggest differences 
table.paint(temp_18s, cleg=0, clabel.row=.6, clabel.col=.6) 

temp1_18s <- t(as.matrix(D_18s))
temp1_18s <- temp1_18s[,ncol(temp1_18s):1]


#save graph on local directory
tiff(file = "distancia_genetica_porifera_18s.tiff", width=10, heigh=8, 
     unit="in",res = 600, compression="lzw")
par(mar = c(2,7,7,2))
image(x = 1:51, y = 1:51, temp1_18s, keep.dendro=TRUE, symm=TRUE, col = rev(viridisLite::viridis(100)),
      xaxt = "n", yaxt = "n", xlab="",ylab="") #change the image size in x and y 1:A, with A being the number of sequences 
axis(side = 2, at = 1:51, lab = rev(rownames(temp1_18s)), las = 2, cex.axis = .5) #change the at number for A 
axis(side = 3, at = 1:51, lab = rownames(temp1_18s), las = 3, cex.axis = .5) #change the at number for A 
dev.off()


########## calculate the Hamming distance from pegas package
dh<-dist.hamming(nbin) 
dh
dhm<-as.matrix(dh)
write.table(dhm,file="dhm.txt", quote=FALSE, sep="\t")

###---------- heatmap figure 

tiff(file = "heatmap_18s_porifera.tiff", width=10, heigh=8, 
     unit="in",res = 600, compression="lzw")
heatmap(dhm,scale="none", col= heat.colors(100),keep.dendro=TRUE, symm=TRUE) #stats package
dev.off()

